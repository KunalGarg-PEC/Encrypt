import {
  require_react
} from "./chunk-WQMOH32Y.js";
import {
  __commonJS,
  __toESM
} from "./chunk-5WWUZCGV.js";

// node_modules/react-json-editor-ajrm/es/mitsuketa/index.js
var require_mitsuketa = __commonJS({
  "node_modules/react-json-editor-ajrm/es/mitsuketa/index.js"(exports, module) {
    function deepRemoveAll_Key(identity, keyName, maxDepth2) {
      if (getType3(keyName) !== "string")
        return void 0;
      if (keyName === "")
        return void 0;
      let clonedIdentity = deepClone(identity);
      var paths = locateAll_Key(clonedIdentity, keyName, maxDepth2);
      if (paths === [] || paths === false)
        return clonedIdentity;
      paths.forEach((path) => {
        if (path === "")
          path = keyName;
        else
          path += "." + keyName;
        path = path.split(".");
        var ref = clonedIdentity;
        if (!Array.isArray(path))
          delete ref[path];
        for (var i = 0; i < path.length; i++) {
          var key = path[i];
          if (key in ref) {
            if (i < path.length - 1)
              ref = ref[key];
            else
              delete ref[key];
          } else
            break;
        }
      });
      return clonedIdentity;
    }
    function deepRemove_Key(identity, keyName, maxDepth2) {
      if (getType3(keyName) !== "string")
        return void 0;
      if (keyName === "")
        return void 0;
      let clonedIdentity = deepClone(identity);
      var path = locate_Key(clonedIdentity, keyName, maxDepth2);
      if (path === false)
        return clonedIdentity;
      if (path === "")
        path = keyName;
      else
        path += "." + keyName;
      path = path.split(".");
      var ref = clonedIdentity;
      if (!Array.isArray(path))
        delete ref[path];
      path.forEach((key, i) => {
        if (i < path.length - 1)
          ref = ref[key];
        else
          delete ref[key];
      });
      return clonedIdentity;
    }
    function renameKeys(identity, keyName, newKeyName, maxDepth2 = null) {
      if (getType3(keyName) !== "string")
        return void 0;
      if (getType3(newKeyName) !== "string")
        return void 0;
      if (keyName === "")
        return void 0;
      if (newKeyName === "")
        return void 0;
      function _renameKeys(identity2, keyName2, newKeyName2, maxDepth3, currentDepth = 0) {
        let keys;
        switch (getType3(identity2)) {
          case "array":
            var Arr = [];
            keys = Object.keys(identity2);
            for (var i = 0, l = keys.length; i < l; i++) {
              let key = keys[i], subIdentity = identity2[key];
              Arr[key] = _renameKeys(subIdentity, keyName2, newKeyName2, maxDepth3, currentDepth + 1);
            }
            return Arr;
          case "object":
            var Obj = {};
            keys = Object.keys(identity2);
            for (var i = 0, l = keys.length; i < l; i++) {
              let key = keys[i], subIdentity = identity2[key];
              if (maxDepth3 !== null ? currentDepth < maxDepth3 : true) {
                if (key === keyName2)
                  key = newKeyName2;
              }
              Obj[key] = _renameKeys(subIdentity, keyName2, newKeyName2, maxDepth3, currentDepth + 1);
            }
            return Obj;
          case "string":
            return "" + identity2;
          case "number":
            return 0 + identity2;
          case "boolean":
            if (identity2)
              return true;
            return false;
          case "null":
            return null;
          case "undefined":
            return void 0;
        }
      }
      return _renameKeys(identity, keyName, newKeyName, maxDepth2, 0);
    }
    function renameKey(identity, keyName, newKeyName, maxDepth2 = null) {
      if (getType3(keyName) !== "string")
        return void 0;
      if (getType3(newKeyName) !== "string")
        return void 0;
      if (keyName === "")
        return void 0;
      if (newKeyName === "")
        return void 0;
      var applied = false;
      function _renameKey(identity2, keyName2, newKeyName2, maxDepth3, currentDepth = 0) {
        let keys;
        switch (getType3(identity2)) {
          case "array":
            var Arr = [];
            keys = Object.keys(identity2);
            for (var i = 0, l = keys.length; i < l; i++) {
              let key = keys[i], subIdentity = identity2[key];
              Arr[key] = _renameKey(subIdentity, keyName2, newKeyName2, maxDepth3, currentDepth + 1);
            }
            return Arr;
          case "object":
            var Obj = {};
            keys = Object.keys(identity2);
            for (var i = 0, l = keys.length; i < l; i++) {
              let key = keys[i], subIdentity = identity2[key];
              if (maxDepth3 !== null ? currentDepth < maxDepth3 : true) {
                if (!applied) {
                  if (key === keyName2) {
                    key = newKeyName2;
                    applied = true;
                  }
                }
              }
              Obj[key] = _renameKey(subIdentity, keyName2, newKeyName2, maxDepth3, currentDepth + 1);
            }
            return Obj;
          case "string":
            return "" + identity2;
          case "number":
            return 0 + identity2;
          case "boolean":
            if (identity2)
              return true;
            return false;
          case "null":
            return null;
          case "undefined":
            return void 0;
        }
      }
      return _renameKey(identity, keyName, newKeyName, maxDepth2, 0);
    }
    function deepClone(identity, maxDepth2 = null, startDepth = null) {
      var R = [];
      function _deepClone(identity2, maxDepth3, startDepth2, currentDepth = 0) {
        let keys;
        if (startDepth2 !== null ? currentDepth < startDepth2 : false) {
          if (isIterable(identity2)) {
            keys = Object.keys(identity2);
            keys.forEach((key) => {
              _deepClone(identity2[key], maxDepth3, startDepth2, currentDepth + 1);
            });
          }
          return;
        }
        if (startDepth2 !== null ? currentDepth == startDepth2 : false) {
          if (startDepth2 == 0) {
            R = _deepClone(identity2, maxDepth3, null, currentDepth);
            return;
          }
          if (isIterable(identity2))
            R.push(_deepClone(identity2, maxDepth3, startDepth2, currentDepth + 1));
          return;
        }
        switch (getType3(identity2)) {
          case "array":
            var Arr = [];
            keys = Object.keys(identity2);
            if (maxDepth3 !== null ? currentDepth < maxDepth3 : true)
              for (var i = 0, l = keys.length; i < l; i++) {
                const key = keys[i], subIdentity = identity2[key];
                Arr[key] = _deepClone(subIdentity, maxDepth3, startDepth2, currentDepth + 1);
              }
            return Arr;
          case "object":
            var Obj = {};
            keys = Object.keys(identity2);
            if (maxDepth3 !== null ? currentDepth < maxDepth3 : true)
              for (var i = 0, l = keys.length; i < l; i++) {
                const key = keys[i], subIdentity = identity2[key];
                Obj[key] = _deepClone(subIdentity, maxDepth3, startDepth2, currentDepth + 1);
              }
            return Obj;
          case "string":
            return "" + identity2;
          case "number":
            return 0 + identity2;
          case "boolean":
            if (identity2)
              return true;
            return false;
          case "null":
            return null;
          case "undefined":
            return void 0;
        }
      }
      if (startDepth === null)
        return _deepClone(identity, maxDepth2, startDepth, 0);
      _deepClone(identity, maxDepth2, startDepth, 0);
      return R;
    }
    function deepFilter_Key(collection, keyName, maxDepth2 = null) {
      if (getType3(keyName) !== "string")
        return void 0;
      if (keyName === "")
        return void 0;
      var paths = locateAll_Key(collection, keyName, maxDepth2);
      if (paths === false)
        return void 0;
      const results = paths.map((path) => {
        if (path === false)
          return void 0;
        if (path === "")
          path = keyName;
        else
          path += "." + keyName;
        path = path.split(".");
        var result = collection;
        if (!Array.isArray(path))
          return result[path];
        path.forEach((key) => {
          result = result[key];
        });
        return result;
      });
      return results;
    }
    function locateAll_Key(collection, keyName, maxDepth2 = null) {
      if (getType3(keyName) !== "string")
        return void 0;
      if (keyName === "")
        return void 0;
      var R = [];
      function _locateAll_Key(collection2, keyName2, xKey = "", path = "", maxDepth3 = null, currentDepth = 0) {
        if (xKey === keyName2)
          R[R.length] = path;
        var result = false;
        if (maxDepth3 !== null) {
          if (currentDepth >= maxDepth3)
            return result;
        }
        if (isIterable(collection2))
          for (var i = 0, keys = Object.keys(collection2), l = keys.length; i < l; i++) {
            const key = keys[i], subcollection = collection2[key];
            _locateAll_Key(subcollection, keyName2, key, (path === "" ? path : path + ".") + key, maxDepth3, currentDepth + 1);
          }
      }
      _locateAll_Key(collection, keyName, "", "", maxDepth2);
      R = R.map((path) => {
        if (getType3(path) === "boolean")
          return path;
        if (path === "")
          return path;
        path = path.split(".");
        path.pop();
        path = path.join(".");
        return path;
      });
      return R.length === 0 ? false : R;
    }
    function deepGet_Key(collection, keyName, maxDepth2 = null) {
      if (getType3(keyName) !== "string")
        return void 0;
      if (keyName === "")
        return void 0;
      var path = locate_Key(collection, keyName, maxDepth2);
      if (path === false)
        return void 0;
      if (path === "")
        path = keyName;
      else
        path += "." + keyName;
      path = path.split(".");
      var result = collection;
      if (!Array.isArray(path))
        return result[path];
      path.forEach((key) => {
        result = result[key];
      });
      return result;
    }
    function locate_Key(collection, keyName, maxDepth2 = null) {
      if (getType3(keyName) !== "string")
        return void 0;
      if (keyName === "")
        return void 0;
      function _locate_Key(collection2, keyName2, path2 = "", maxDepth3, currentDepth = 0) {
        if (path2 === keyName2)
          return path2;
        var result = false;
        if (maxDepth3 !== null) {
          if (currentDepth >= maxDepth3)
            return result;
        }
        if (isIterable(collection2))
          for (var i = 0, keys = Object.keys(collection2), l = keys.length; i < l; i++) {
            const key = keys[i], subcollection = collection2[key], res = _locate_Key(subcollection, keyName2, key, maxDepth3, currentDepth + 1);
            if (res) {
              path2 = path2 === "" ? path2 : path2 + ".";
              result = path2 + res;
              break;
            }
          }
        return result;
      }
      var path = _locate_Key(collection, keyName, "", maxDepth2, 0);
      if (getType3(path) === "boolean")
        return path;
      if (path === "")
        return path;
      path = path.split(".");
      path.pop();
      path = path.join(".");
      return path;
    }
    function matchDepth(collection, identity, maxDepth2 = null) {
      var path = locate2(collection, identity, maxDepth2);
      if (path === false)
        return false;
      if (path === "")
        return 0;
      path = path.split(".");
      return path.length;
    }
    function maxDepth(identity, maxLayer = null) {
      let R = 0;
      function _maxDepth(identity2, maxLayer2, currentDepth = 0) {
        if (R < currentDepth)
          R = currentDepth;
        if (maxLayer2 !== null) {
          if (currentDepth >= maxLayer2)
            return;
        }
        if (isIterable(identity2)) {
          var keys = Object.keys(identity2);
          keys.forEach((key) => {
            var subIdentity = identity2[key];
            _maxDepth(subIdentity, maxLayer2, currentDepth + 1);
          });
        }
      }
      _maxDepth(identity, maxLayer);
      return R;
    }
    function countMatches(collection, identity, nthDepth = null, maxDepth2 = null) {
      var depth, nthDepth_isNull = nthDepth === null, maxDepth_isNull = maxDepth2 === null;
      if (nthDepth_isNull && maxDepth_isNull)
        depth = null;
      else if (!nthDepth_isNull && !maxDepth_isNull) {
        if (nthDepth < maxDepth2)
          depth = nthDepth;
        else
          depth = maxDepth2;
      } else if (nthDepth)
        depth = nthDepth;
      else
        depth = maxDepth2;
      var paths = locateAll(collection, identity, depth);
      if (paths === false)
        return 0;
      if (nthDepth === null)
        return paths.length;
      if (getType3(nthDepth) === "number") {
        let count = 0;
        paths.forEach((path) => {
          path = path.split(".");
          if (path.length === nthDepth)
            count++;
        });
        return count;
      }
      return void 0;
    }
    function onlyFalsy(collection, identities, property, maxDepth2 = null) {
      if (getType3(identities) === "array") {
        let result = [];
        identities.forEach((identity) => {
          const subCollection = deepFilter(collection, identity);
          if (isTruthy(subCollection)) {
            if (foundFalsy(subCollection, property, maxDepth2))
              result.push(identity);
          }
        });
        return result;
      }
      if (getType3(identities) === "object") {
        let result = {};
        Object.keys(identities).forEach((key) => {
          const identity = identities[key], subCollection = deepFilter(collection, identity);
          if (isTruthy(subCollection)) {
            if (foundFalsy(subCollection, property, maxDepth2))
              result[key] = identity;
          }
        });
        return result;
      }
      if (foundFalsy(collection, property, maxDepth2))
        return identities;
    }
    function foundFalsy(collection, identity, maxDepth2 = null) {
      identity = singleProperty(identity);
      if (isFalsy(identity))
        return void 0;
      function _foundFalsy(collection2, identity2, maxDepth3, currentDepth = 0) {
        if (containsKeys(collection2, [identity2]))
          return isFalsy(collection2[identity2]);
        if (maxDepth3 !== null) {
          if (currentDepth >= maxDepth3)
            return false;
        }
        if (isIterable(collection2))
          for (var i = 0, keys = Object.keys(collection2), l = keys.length; i < l; i++) {
            const key = keys[i], subcollection = collection2[key], res = _foundFalsy(subcollection, identity2, maxDepth3, currentDepth + 1);
            if (res)
              return true;
          }
        return false;
      }
      return _foundFalsy(collection, identity, maxDepth2);
    }
    function onlyTruthy(collection, identities, property, maxDepth2 = null) {
      if (getType3(identities) === "array") {
        let result = [];
        identities.forEach((identity) => {
          const subCollection = deepFilter(collection, identity);
          if (isTruthy(subCollection)) {
            if (foundTruthy(subCollection, property, maxDepth2))
              result.push(identity);
          }
        });
        return result;
      }
      if (getType3(identities) === "object") {
        let result = {};
        Object.keys(identities).forEach((key) => {
          const identity = identities[key], subCollection = deepFilter(collection, identity);
          if (isTruthy(subCollection)) {
            if (foundTruthy(subCollection, property, maxDepth2))
              result[key] = identity;
          }
        });
        return result;
      }
      if (foundTruthy(collection, property, maxDepth2))
        return identities;
    }
    function foundTruthy(collection, identity, maxDepth2 = null) {
      identity = singleProperty(identity);
      if (isFalsy(identity))
        return void 0;
      function _foundTruthy(collection2, identity2, maxDepth3, currentDepth = 0) {
        if (containsKeys(collection2, [identity2]))
          return isTruthy(collection2[identity2]);
        if (maxDepth3 !== null) {
          if (currentDepth >= maxDepth3)
            return false;
        }
        if (isIterable(collection2))
          for (var i = 0, keys = Object.keys(collection2), l = keys.length; i < l; i++) {
            const key = keys[i], subcollection = collection2[key], res = _foundTruthy(subcollection, identity2, maxDepth3, currentDepth + 1);
            if (res)
              return true;
          }
        return false;
      }
      return _foundTruthy(collection, identity, maxDepth2, 0);
    }
    function singleProperty(identity) {
      const propCount = length(identity);
      if (propCount > 1)
        return false;
      if (propCount === 1)
        return Object.keys(identity)[0];
      if (propCount === 0) {
        if (["string", "number"].indexOf(getType3(identity)) > -1)
          return identity;
      }
      return false;
    }
    function isTruthy(identity) {
      return !isFalsy(identity);
    }
    function isFalsy(identity) {
      if (falser(identity) === false)
        return true;
      return false;
    }
    function falser(identity) {
      if (isIterable(identity))
        return identity;
      if (["null", "undefined"].indexOf(getType3(identity)) > -1)
        return false;
      if (["", 0, false].indexOf(identity) > -1)
        return false;
      return identity;
    }
    function length(identity) {
      if (["array", "object"].indexOf(getType3(identity)) === -1)
        return 0;
      return Object.keys(identity).length;
    }
    function onlyMissing(collection, identities, maxDepth2 = null) {
      if (getType3(identities) === "array") {
        let result = [];
        identities.forEach((identity) => {
          if (!exists(collection, identity, maxDepth2))
            result.push(identity);
        });
        return result;
      }
      if (getType3(identities) === "object") {
        let result = {};
        Object.keys(identities).forEach((key) => {
          let identity = identities[key];
          if (!exists(collection, identity, maxDepth2))
            result[key] = identity;
        });
        return result;
      }
      if (!exists(collection, identities, maxDepth2))
        return identities;
    }
    function onlyExisting(collection, identities, maxDepth2 = null) {
      if (getType3(identities) === "array") {
        let result = [];
        identities.forEach((identity) => {
          if (exists(collection, identity, maxDepth2))
            result.push(identity);
        });
        return result;
      }
      if (getType3(identities) === "object") {
        let result = {};
        Object.keys(identities).forEach((key) => {
          let identity = identities[key];
          if (exists(collection, identity, maxDepth2))
            result[key] = identity;
        });
        return result;
      }
      if (exists(collection, identities, maxDepth2))
        return identities;
    }
    function exists(collection, identity, maxDepth2 = null, currentDepth = 0) {
      if (identical2(collection, identity))
        return true;
      if (isIterable(identity)) {
        if (sameType(collection, identity)) {
          if (containsKeys(collection, Object.keys(identity))) {
            const trimmed = trim(collection, Object.keys(identity));
            if (identical2(trimmed, identity))
              return true;
          }
        }
      }
      if (maxDepth2 === null ? true : currentDepth < maxDepth2) {
        if (isIterable(collection))
          for (var i = 0, keys = Object.keys(collection), l = keys.length; i < l; i++) {
            const key = keys[i], subcollection = collection[key], res = exists(subcollection, identity, maxDepth2, currentDepth + 1);
            if (res)
              return true;
          }
      }
      return false;
    }
    function deepFilter(collection, identity, maxDepth2 = null) {
      var paths = locateAll(collection, identity, maxDepth2);
      if (paths === false)
        return void 0;
      const results = paths.map((path) => {
        if (path === "")
          return collection;
        path = path.split(".");
        if (["array", "object"].indexOf(getType3(identity)) === -1)
          path.splice(-1, 1);
        var result = collection;
        if (!Array.isArray(path))
          return result[path];
        path.forEach((key) => {
          result = result[key];
        });
        return result;
      });
      return results;
    }
    function locateAll(collection, identity, maxDepth2 = null) {
      var R = [];
      function _locateAll(collection2, identity2, path = "", maxDepth3, currentDepth) {
        if (isIterable(identity2)) {
          if (sameType(collection2, identity2)) {
            if (containsKeys(collection2, Object.keys(identity2))) {
              const trimmed = trim(collection2, Object.keys(identity2));
              if (identical2(trimmed, identity2))
                R[R.length] = path;
            }
          }
        }
        if (identical2(collection2, identity2))
          R[R.length] = path;
        var result = false;
        if (maxDepth3 !== null) {
          if (currentDepth >= maxDepth3)
            return result;
        }
        if (isIterable(collection2))
          for (var i = 0, keys = Object.keys(collection2), l = keys.length; i < l; i++) {
            const key = keys[i], subcollection = collection2[key];
            _locateAll(subcollection, identity2, (path === "" ? path : path + ".") + key, maxDepth3, currentDepth + 1);
          }
      }
      _locateAll(collection, identity, "", maxDepth2, 0);
      return R.length === 0 ? false : R;
    }
    function deepGet(collection, identity, maxDepth2 = null) {
      var path = locate2(collection, identity, maxDepth2);
      if (path === false)
        return void 0;
      if (path === "")
        return collection;
      path = path.split(".");
      if (["array", "object"].indexOf(getType3(identity)) === -1)
        path.splice(-1, 1);
      var result = collection;
      if (!Array.isArray(path))
        return result[path];
      path.forEach((key) => {
        result = result[key];
      });
      return result;
    }
    function locate2(collection, identity, maxDepth2 = null) {
      function _locate(collection2, identity2, path = "", maxDepth3, currentDepth) {
        if (isIterable(identity2)) {
          if (sameType(collection2, identity2)) {
            if (containsKeys(collection2, Object.keys(identity2))) {
              const trimmed = trim(collection2, Object.keys(identity2));
              if (identical2(trimmed, identity2))
                return path;
            }
          }
        }
        if (identical2(collection2, identity2))
          return path;
        var result = false;
        if (maxDepth3 !== null) {
          if (currentDepth >= maxDepth3)
            return result;
        }
        if (isIterable(collection2))
          for (var i = 0, keys = Object.keys(collection2), l = keys.length; i < l; i++) {
            const key = keys[i], subcollection = collection2[key], res = _locate(subcollection, identity2, key, maxDepth3, currentDepth + 1);
            if (res) {
              path = path === "" ? path : path + ".";
              result = path + res;
              break;
            }
          }
        return result;
      }
      return _locate(collection, identity, "", maxDepth2, 0);
    }
    function trim(identity, keyList) {
      const identityType = getType3(identity);
      if (["array", "object"].indexOf(identityType) === -1)
        return void 0;
      const keyCount = keyList.length;
      if (keyCount === 0)
        return void 0;
      var newIdentity;
      switch (identityType) {
        case "object":
          newIdentity = {};
          keyList.forEach((key) => {
            if (key in identity)
              newIdentity[key] = identity[key];
          });
          break;
        case "array":
          newIdentity = [];
          keyList.forEach((key) => {
            if (key in identity)
              newIdentity.push(identity[key]);
          });
          break;
      }
      return newIdentity;
    }
    function containsKeys(identity, keyList) {
      const keyCount = keyList.length;
      if (keyCount === 0 || !isIterable(identity))
        return false;
      const identitykeys = Object.keys(identity);
      var result = true;
      for (var i = 0; i < keyCount; i++) {
        const key = "" + keyList[i];
        if (identitykeys.indexOf(key) === -1) {
          result = false;
          break;
        }
      }
      return result;
    }
    function isIterable(identity) {
      if (["array", "object"].indexOf(getType3(identity)) === -1)
        return false;
      if (Object.keys(identity).length === 0)
        return false;
      return true;
    }
    function identical2(identityA, identityB) {
      const structureMatch = sameStructure(identityA, identityB);
      if (structureMatch === false)
        return structureMatch;
      if (["array", "object"].indexOf(structureMatch) === -1)
        return identityA === identityB;
      const Keys = Object.keys(identityA), KeyCount = Keys.length;
      var childMatch = true;
      for (var i = 0; i < KeyCount; i++) {
        const Key = Keys[i], identicalMatch = identical2(identityA[Key], identityB[Key]);
        if (identicalMatch === false) {
          childMatch = identicalMatch;
          break;
        }
        ;
      }
      return childMatch;
    }
    function sameStructure(identityA, identityB) {
      const typeMatch = sameType(identityA, identityB);
      if (typeMatch === false)
        return false;
      if (["array", "object"].indexOf(typeMatch) > -1) {
        const AKeys = Object.keys(identityA), BKeys = Object.keys(identityB), AKeyCount = AKeys.length, BKeyCount = BKeys.length;
        if (!(AKeyCount === BKeyCount))
          return false;
        if (AKeyCount === 0)
          return true;
        for (var i = 0; i < AKeyCount; i++) {
          if (AKeys[i] !== BKeys[i])
            return false;
        }
      }
      return typeMatch;
    }
    function sameType(identityA, identityB) {
      const typeA = getType3(identityA);
      return typeA === getType3(identityB) ? typeA : false;
    }
    function getType3(identity) {
      if (identity === null)
        return "null";
      const it = typeof identity;
      if (it === "object") {
        if (Array.isArray(identity))
          return "array";
      }
      return it;
    }
    var mitsuketa = {
      getType: function(identity) {
        return getType3(identity);
      },
      sameType: function(identityA, identityB) {
        return sameType(identityA, identityB);
      },
      sameStructure: function(identityA, identityB) {
        return sameStructure(identityA, identityB);
      },
      identical: function(identityA, identityB) {
        return identical2(identityA, identityB);
      },
      isIterable: function(identity) {
        return isIterable(identity);
      },
      containsKeys: function(identity, keyList) {
        return containsKeys(identity, keyList);
      },
      trim: function(identity, keyList) {
        return trim(identity, keyList);
      },
      locate: function(collection, identity, maxDepth2) {
        return locate2(collection, identity, maxDepth2);
      },
      deepGet: function(collection, identity, maxDepth2) {
        return deepGet(collection, identity, maxDepth2);
      },
      locateAll: function(collection, identity, maxDepth2) {
        return locateAll(collection, identity, maxDepth2);
      },
      deepFilter: function(collection, identity, maxDepth2) {
        return deepFilter(collection, identity, maxDepth2);
      },
      exists: function(collection, identity, maxDepth2) {
        return exists(collection, identity, maxDepth2);
      },
      onlyExisting: function(collection, identities, maxDepth2) {
        return onlyExisting(collection, identities, maxDepth2);
      },
      onlyMissing: function(collection, identities, maxDepth2) {
        return onlyMissing(collection, identities, maxDepth2);
      },
      length: function(identity) {
        return length(identity);
      },
      isFalsy: function(identity) {
        return isFalsy(identity);
      },
      isTruthy: function(identity) {
        return isTruthy(identity);
      },
      foundTruthy: function(collection, identity, maxDepth2) {
        return foundTruthy(collection, identity, maxDepth2);
      },
      onlyTruthy: function(collection, identities, property, maxDepth2) {
        return onlyTruthy(collection, identities, property, maxDepth2);
      },
      foundFalsy: function(collection, identity, maxDepth2) {
        return foundFalsy(collection, identity, maxDepth2);
      },
      onlyFalsy: function(collection, identities, property, maxDepth2) {
        return onlyFalsy(collection, identities, property, maxDepth2);
      },
      countMatches: function(collection, identity, nthDepth, maxDepth2) {
        return countMatches(collection, identity, nthDepth, maxDepth2);
      },
      matchDepth: function(collection, identity, maxDepth2) {
        return matchDepth(collection, identity, maxDepth2);
      },
      maxDepth: function(identity, maxLayer) {
        return maxDepth(identity, maxLayer);
      },
      locate_Key: function(collection, keyName, maxDepth2) {
        return locate_Key(collection, keyName, maxDepth2);
      },
      deepGet_Key: function(collection, keyName, maxDepth2) {
        return deepGet_Key(collection, keyName, maxDepth2);
      },
      locateAll_Key: function(collection, keyName, maxDepth2) {
        return locateAll_Key(collection, keyName, maxDepth2);
      },
      deepFilter_Key: function(collection, keyName, maxDepth2) {
        return deepFilter_Key(collection, keyName, maxDepth2);
      },
      deepClone: function(identity, maxDepth2, startDepth) {
        return deepClone(identity, maxDepth2, startDepth);
      },
      renameKey: function(identity, keyName, newKeyName, maxDepth2) {
        return renameKey(identity, keyName, newKeyName, maxDepth2);
      },
      renameKeys: function(identity, keyName, newKeyName, maxDepth2) {
        return renameKeys(identity, keyName, newKeyName, maxDepth2);
      },
      deepRemove_Key: function(identity, keyName, maxDepth2) {
        return deepRemove_Key(identity, keyName, maxDepth2);
      },
      deepRemoveAll_Key: function(identity, keyName, maxDepth2) {
        return deepRemoveAll_Key(identity, keyName, maxDepth2);
      }
    };
    module.exports = exports = mitsuketa;
  }
});

// node_modules/@babel/runtime/helpers/esm/typeof.js
function _typeof(o) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof(o);
}

// node_modules/@babel/runtime/helpers/esm/toPrimitive.js
function toPrimitive(t, r) {
  if ("object" != _typeof(t) || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != _typeof(i))
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}

// node_modules/@babel/runtime/helpers/esm/toPropertyKey.js
function toPropertyKey(t) {
  var i = toPrimitive(t, "string");
  return "symbol" == _typeof(i) ? i : i + "";
}

// node_modules/@babel/runtime/helpers/esm/defineProperty.js
function _defineProperty(e, r, t) {
  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
    value: t,
    enumerable: true,
    configurable: true,
    writable: true
  }) : e[r] = t, e;
}

// node_modules/@babel/runtime/helpers/esm/objectSpread.js
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? Object(arguments[r]) : {}, o = Object.keys(t);
    "function" == typeof Object.getOwnPropertySymbols && o.push.apply(o, Object.getOwnPropertySymbols(t).filter(function(e2) {
      return Object.getOwnPropertyDescriptor(t, e2).enumerable;
    })), o.forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    });
  }
  return e;
}

// node_modules/react-json-editor-ajrm/es/index.js
var import_react = __toESM(require_react());

// node_modules/react-json-editor-ajrm/es/themes.js
var dark_vscode_tribute = {
  default: "#D4D4D4",
  background: "#1E1E1E",
  background_warning: "#1E1E1E",
  string: "#CE8453",
  number: "#B5CE9F",
  colon: "#49B8F7",
  keys: "#9CDCFE",
  keys_whiteSpace: "#AF74A5",
  primitive: "#6392C6"
};
var light_mitsuketa_tribute = {
  default: "#D4D4D4",
  background: "#FCFDFD",
  background_warning: "#FEECEB",
  string: "#FA7921",
  number: "#70CE35",
  colon: "#49B8F7",
  keys: "#59A5D8",
  keys_whiteSpace: "#835FB6",
  primitive: "#386FA4"
};
var themes = {
  dark_vscode_tribute,
  light_mitsuketa_tribute
};
var themes_default = themes;

// node_modules/react-json-editor-ajrm/es/index.js
var import_mitsuketa2 = __toESM(require_mitsuketa());

// node_modules/react-json-editor-ajrm/es/err.js
var import_mitsuketa = __toESM(require_mitsuketa());
var err = {
  getCaller: (skip = 1) => {
    const stackTrace = new Error().stack;
    var callerName = stackTrace.replace(/^Error\s+/, "");
    callerName = callerName.split("\n")[skip];
    callerName = callerName.replace(/^\s+at Object./, "").replace(/^\s+at /, "").replace(/ \(.+\)$/, "");
    return callerName;
  },
  throwError: (fxName = "unknown function", paramName = "unknown parameter", expectation = "to be defined") => {
    throw ["@", fxName, "(): Expected parameter '", paramName, "' ", expectation].join("");
  },
  isUndefined: (paramName = "<unknown parameter>", param) => {
    if ([null, void 0].indexOf(param) > -1)
      err.throwError(err.getCaller(2), paramName);
  },
  isFalsy: (paramName = "<unknown parameter>", param) => {
    if (!param)
      err.throwError(err.getCaller(2), paramName);
  },
  isNoneOf: (paramName = "<unknown parameter>", param, contains = []) => {
    if (contains.indexOf(param) === -1)
      err.throwError(err.getCaller(2), paramName, "to be any of" + JSON.stringify(contains));
  },
  isAnyOf: (paramName = "<unknown parameter>", param, contains = []) => {
    if (contains.indexOf(param) > -1)
      err.throwError(err.getCaller(2), paramName, "not to be any of" + JSON.stringify(contains));
  },
  isNotType: (paramName = "<unknown parameter>", param, type = "") => {
    if ((0, import_mitsuketa.getType)(param) !== type.toLowerCase())
      err.throwError(err.getCaller(2), paramName, "to be type " + type.toLowerCase());
  },
  isAnyTypeOf: (paramName = "<unknown parameter>", param, types = []) => {
    types.forEach((type) => {
      if ((0, import_mitsuketa.getType)(param) === type)
        err.throwError(err.getCaller(2), paramName, "not to be type of " + type.toLowerCase());
    });
  },
  missingKey: (paramName = "<unknown parameter>", param, keyName = "") => {
    err.isUndefined(paramName, param);
    if (Object.keys(param).indexOf(keyName) === -1)
      err.throwError(err.getCaller(2), paramName, "to contain '" + keyName + "' key");
  },
  missingAnyKeys: (paramName = "<unknown parameter>", param, keyNames = [""]) => {
    err.isUndefined(paramName, param);
    const keyList = Object.keys(param);
    keyNames.forEach((keyName) => {
      if (keyList.indexOf(keyName) === -1)
        err.throwError(err.getCaller(2), paramName, "to contain '" + keyName + "' key");
    });
  },
  containsUndefined: (paramName = "<unknown parameter>", param) => {
    [void 0, null].forEach((value) => {
      const location = (0, import_mitsuketa.locate)(param, value);
      if (location)
        err.throwError(err.getCaller(2), paramName, "not to contain '" + JSON.stringify(value) + "' at " + location);
    });
  },
  isInvalidPath: (paramName = "<unknown parameter>", param) => {
    err.isUndefined(paramName, param);
    err.isNotType(paramName, param, "string");
    err.isAnyOf(paramName, param, ["", "/"]);
    ".$[]#".split().forEach((invalidChar) => {
      if (param.indexOf(invalidChar) > -1)
        err.throwError(err.getCaller(2), paramName, "not to contain invalid character '" + invalidChar + "'");
    });
    if (param.match(/\/{2,}/g))
      err.throwError(err.getCaller(2), paramName, "not to contain consecutive forward slash characters");
  },
  isInvalidWriteData: (paramName = "<unknown parameter>", param) => {
    err.isUndefined(paramName, param);
    err.containsUndefined(paramName, param);
  }
};
var err_default = err;

// node_modules/react-json-editor-ajrm/es/locale/index.js
var stringify = (arg) => Array.isArray(arg) ? arg.join(", ") : typeof arg === "string" ? arg : "" + arg;
var format = (str, args) => args ? Object.keys(args).reduce((str2, arg) => str2.replace(new RegExp(`\\{${arg}\\}`, "gi"), stringify(args[arg])), str) : str;

// node_modules/react-json-editor-ajrm/es/locale/en.js
var en_default = {
  format: "{reason} at line {line}",
  symbols: {
    colon: "colon",
    // :
    comma: "comma",
    // ,  ،  、
    semicolon: "semicolon",
    // ;
    slash: "slash",
    // /  relevant for comment syntax support
    backslash: "backslash",
    // \  relevant for escaping character
    brackets: {
      round: "round brackets",
      // ( )
      square: "square brackets",
      // [ ]
      curly: "curly brackets",
      // { }
      angle: "angle brackets"
      // < >
    },
    period: "period",
    // . Also known as full point, full stop, or dot
    quotes: {
      single: "single quote",
      // '
      double: "double quote",
      // "
      grave: "grave accent"
      // ` used on Javascript ES6 Syntax for String Templates
    },
    space: "space",
    //       
    ampersand: "ampersand",
    //	&
    asterisk: "asterisk",
    //	*  relevant for some comment sytanx
    at: "at sign",
    //	@  multiple uses in other coding languages including certain data types
    equals: "equals sign",
    //	=
    hash: "hash",
    //	#
    percent: "percent",
    //	%
    plus: "plus",
    //	+
    minus: "minus",
    //	−
    dash: "dash",
    //	−
    hyphen: "hyphen",
    //	−
    tilde: "tilde",
    //	~
    underscore: "underscore",
    //	_
    bar: "vertical bar"
    //	|
  },
  types: {
    key: "key",
    value: "value",
    number: "number",
    string: "string",
    primitive: "primitive",
    boolean: "boolean",
    character: "character",
    integer: "integer",
    array: "array",
    float: "float"
    //... Reference: https://en.wikipedia.org/wiki/List_of_data_structures
  },
  invalidToken: {
    tokenSequence: {
      prohibited: "'{firstToken}' token cannot be followed by '{secondToken}' token(s)",
      permitted: "'{firstToken}' token can only be followed by '{secondToken}' token(s)"
    },
    termSequence: {
      prohibited: "A {firstTerm} cannot be followed by a {secondTerm}",
      permitted: "A {firstTerm} can only be followed by a {secondTerm}"
    },
    double: "'{token}' token cannot be followed by another '{token}' token",
    useInstead: "'{badToken}' token is not accepted. Use '{goodToken}' instead",
    unexpected: "Unexpected '{token}' token found"
  },
  brace: {
    curly: {
      missingOpen: "Missing '{' open curly brace",
      missingClose: "Open '{' curly brace is missing closing '}' curly brace",
      cannotWrap: "'{token}' token cannot be wrapped in '{}' curly braces"
    },
    square: {
      missingOpen: "Missing '[' open square brace",
      missingClose: "Open '[' square brace is missing closing ']' square brace",
      cannotWrap: "'{token}' token cannot be wrapped in '[]' square braces"
    }
  },
  string: {
    missingOpen: "Missing/invalid opening string '{quote}' token",
    missingClose: "Missing/invalid closing string '{quote}' token",
    mustBeWrappedByQuotes: "Strings must be wrapped by quotes",
    nonAlphanumeric: "Non-alphanumeric token '{token}' is not allowed outside string notation",
    unexpectedKey: "Unexpected key found at string position"
  },
  key: {
    numberAndLetterMissingQuotes: "Key beginning with number and containing letters must be wrapped by quotes",
    spaceMissingQuotes: "Key containing space must be wrapped by quotes",
    unexpectedString: "Unexpected string found at key position"
  },
  noTrailingOrLeadingComma: "Trailing or leading commas in arrays and objects are not permitted"
};

// node_modules/react-json-editor-ajrm/es/index.js
var JSONInput = class extends import_react.Component {
  constructor(props) {
    super(props);
    this.updateInternalProps = this.updateInternalProps.bind(this);
    this.createMarkup = this.createMarkup.bind(this);
    this.onClick = this.onClick.bind(this);
    this.onBlur = this.onBlur.bind(this);
    this.update = this.update.bind(this);
    this.getCursorPosition = this.getCursorPosition.bind(this);
    this.setCursorPosition = this.setCursorPosition.bind(this);
    this.scheduledUpdate = this.scheduledUpdate.bind(this);
    this.setUpdateTime = this.setUpdateTime.bind(this);
    this.renderLabels = this.renderLabels.bind(this);
    this.newSpan = this.newSpan.bind(this);
    this.renderErrorMessage = this.renderErrorMessage.bind(this);
    this.onScroll = this.onScroll.bind(this);
    this.showPlaceholder = this.showPlaceholder.bind(this);
    this.tokenize = this.tokenize.bind(this);
    this.onKeyPress = this.onKeyPress.bind(this);
    this.onKeyDown = this.onKeyDown.bind(this);
    this.onPaste = this.onPaste.bind(this);
    this.stopEvent = this.stopEvent.bind(this);
    this.refContent = null;
    this.refLabels = null;
    this.updateInternalProps();
    this.renderCount = 1;
    this.state = {
      prevPlaceholder: "",
      markupText: "",
      plainText: "",
      json: "",
      jsObject: void 0,
      lines: false,
      error: false
    };
    if (!this.props.locale) {
      console.warn("[react-json-editor-ajrm - Deprecation Warning] You did not provide a 'locale' prop for your JSON input - This will be required in a future version. English has been set as a default.");
    }
  }
  updateInternalProps() {
    let colors = {}, style = {}, theme = themes_default.dark_vscode_tribute;
    if ("theme" in this.props) {
      if (typeof this.props.theme === "string") {
        if (this.props.theme in themes_default)
          theme = themes_default[this.props.theme];
      }
    }
    colors = theme;
    if ("colors" in this.props)
      colors = {
        default: "default" in this.props.colors ? this.props.colors.default : colors.default,
        string: "string" in this.props.colors ? this.props.colors.string : colors.string,
        number: "number" in this.props.colors ? this.props.colors.number : colors.number,
        colon: "colon" in this.props.colors ? this.props.colors.colon : colors.colon,
        keys: "keys" in this.props.colors ? this.props.colors.keys : colors.keys,
        keys_whiteSpace: "keys_whiteSpace" in this.props.colors ? this.props.colors.keys_whiteSpace : colors.keys_whiteSpace,
        primitive: "primitive" in this.props.colors ? this.props.colors.primitive : colors.primitive,
        error: "error" in this.props.colors ? this.props.colors.error : colors.error,
        background: "background" in this.props.colors ? this.props.colors.background : colors.background,
        background_warning: "background_warning" in this.props.colors ? this.props.colors.background_warning : colors.background_warning
      };
    this.colors = colors;
    if ("style" in this.props)
      style = {
        outerBox: "outerBox" in this.props.style ? this.props.style.outerBox : {},
        container: "container" in this.props.style ? this.props.style.container : {},
        warningBox: "warningBox" in this.props.style ? this.props.style.warningBox : {},
        errorMessage: "errorMessage" in this.props.style ? this.props.style.errorMessage : {},
        body: "body" in this.props.style ? this.props.style.body : {},
        labelColumn: "labelColumn" in this.props.style ? this.props.style.labelColumn : {},
        labels: "labels" in this.props.style ? this.props.style.labels : {},
        contentBox: "contentBox" in this.props.style ? this.props.style.contentBox : {}
      };
    else
      style = {
        outerBox: {},
        container: {},
        warningBox: {},
        errorMessage: {},
        body: {},
        labelColumn: {},
        labels: {},
        contentBox: {}
      };
    this.style = style;
    this.confirmGood = "confirmGood" in this.props ? this.props.confirmGood : true;
    const totalHeight = this.props.height || "610px", totalWidth = this.props.width || "479px";
    this.totalHeight = totalHeight;
    this.totalWidth = totalWidth;
    if (!("onKeyPressUpdate" in this.props) || this.props.onKeyPressUpdate) {
      if (!this.timer)
        this.timer = setInterval(this.scheduledUpdate, 100);
    } else if (this.timer) {
      clearInterval(this.timer);
      this.timer = false;
    }
    this.updateTime = false;
    this.waitAfterKeyPress = "waitAfterKeyPress" in this.props ? this.props.waitAfterKeyPress : 1e3;
    this.resetConfiguration = "reset" in this.props ? this.props.reset : false;
  }
  render() {
    const id = this.props.id, markupText = this.state.markupText, error = this.props.error || this.state.error, colors = this.colors, style = this.style, confirmGood = this.confirmGood, totalHeight = this.totalHeight, totalWidth = this.totalWidth, hasError = !!this.props.error || (error ? "token" in error : false);
    this.renderCount++;
    return import_react.default.createElement("div", {
      name: "outer-box",
      id: id && id + "-outer-box",
      style: _objectSpread({
        display: "block",
        overflow: "none",
        height: totalHeight,
        width: totalWidth,
        margin: 0,
        boxSizing: "border-box",
        position: "relative"
      }, style.outerBox)
    }, confirmGood ? import_react.default.createElement("div", {
      style: {
        opacity: hasError ? 0 : 1,
        height: "30px",
        width: "30px",
        position: "absolute",
        top: 0,
        right: 0,
        transform: "translate(-25%,25%)",
        pointerEvents: "none",
        transitionDuration: "0.2s",
        transitionTimingFunction: "cubic-bezier(0, 1, 0.5, 1)"
      }
    }, import_react.default.createElement("svg", {
      height: "30px",
      width: "30px",
      viewBox: "0 0 100 100"
    }, import_react.default.createElement("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      fill: "green",
      opacity: "0.85",
      d: "M39.363,79L16,55.49l11.347-11.419L39.694,56.49L72.983,23L84,34.085L39.363,79z"
    }))) : void 0, import_react.default.createElement("div", {
      name: "container",
      id: id && id + "-container",
      style: _objectSpread({
        display: "block",
        height: totalHeight,
        width: totalWidth,
        margin: 0,
        boxSizing: "border-box",
        overflow: "hidden",
        fontFamily: "Roboto, sans-serif"
      }, style.container),
      onClick: this.onClick
    }, import_react.default.createElement("div", {
      name: "warning-box",
      id: id && id + "-warning-box",
      style: _objectSpread({
        display: "block",
        overflow: "hidden",
        height: hasError ? "60px" : "0px",
        width: "100%",
        margin: 0,
        backgroundColor: colors.background_warning,
        transitionDuration: "0.2s",
        transitionTimingFunction: "cubic-bezier(0, 1, 0.5, 1)"
      }, style.warningBox),
      onClick: this.onClick
    }, import_react.default.createElement("span", {
      style: {
        display: "inline-block",
        height: "60px",
        width: "60px",
        margin: 0,
        boxSizing: "border-box",
        overflow: "hidden",
        verticalAlign: "top",
        pointerEvents: "none"
      },
      onClick: this.onClick
    }, import_react.default.createElement("div", {
      style: {
        position: "relative",
        top: 0,
        left: 0,
        height: "60px",
        width: "60px",
        margin: 0,
        pointerEvents: "none"
      },
      onClick: this.onClick
    }, import_react.default.createElement("div", {
      style: {
        position: "absolute",
        top: "50%",
        left: "50%",
        transform: "translate(-50%, -50%)",
        pointerEvents: "none"
      },
      onClick: this.onClick
    }, import_react.default.createElement("svg", {
      height: "25px",
      width: "25px",
      viewBox: "0 0 100 100"
    }, import_react.default.createElement("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      fill: "red",
      d: "M73.9,5.75c0.467-0.467,1.067-0.7,1.8-0.7c0.7,0,1.283,0.233,1.75,0.7l16.8,16.8  c0.467,0.5,0.7,1.084,0.7,1.75c0,0.733-0.233,1.334-0.7,1.801L70.35,50l23.9,23.95c0.5,0.467,0.75,1.066,0.75,1.8  c0,0.667-0.25,1.25-0.75,1.75l-16.8,16.75c-0.534,0.467-1.117,0.7-1.75,0.7s-1.233-0.233-1.8-0.7L50,70.351L26.1,94.25  c-0.567,0.467-1.167,0.7-1.8,0.7c-0.667,0-1.283-0.233-1.85-0.7L5.75,77.5C5.25,77,5,76.417,5,75.75c0-0.733,0.25-1.333,0.75-1.8  L29.65,50L5.75,26.101C5.25,25.667,5,25.066,5,24.3c0-0.666,0.25-1.25,0.75-1.75l16.8-16.8c0.467-0.467,1.05-0.7,1.75-0.7  c0.733,0,1.333,0.233,1.8,0.7L50,29.65L73.9,5.75z"
    }))))), import_react.default.createElement("span", {
      style: {
        display: "inline-block",
        height: "60px",
        width: "calc(100% - 60px)",
        margin: 0,
        overflow: "hidden",
        verticalAlign: "top",
        position: "absolute",
        pointerEvents: "none"
      },
      onClick: this.onClick
    }, this.renderErrorMessage())), import_react.default.createElement("div", {
      name: "body",
      id: id && id + "-body",
      style: _objectSpread({
        display: "flex",
        overflow: "none",
        height: hasError ? "calc(100% - 60px)" : "100%",
        width: "",
        margin: 0,
        resize: "none",
        fontFamily: "Roboto Mono, Monaco, monospace",
        fontSize: "11px",
        backgroundColor: colors.background,
        transitionDuration: "0.2s",
        transitionTimingFunction: "cubic-bezier(0, 1, 0.5, 1)"
      }, style.body),
      onClick: this.onClick
    }, import_react.default.createElement("span", {
      name: "labels",
      id: id && id + "-labels",
      ref: (ref) => this.refLabels = ref,
      style: _objectSpread({
        display: "inline-block",
        boxSizing: "border-box",
        verticalAlign: "top",
        height: "100%",
        width: "44px",
        margin: 0,
        padding: "5px 0px 5px 10px",
        overflow: "hidden",
        color: "#D4D4D4"
      }, style.labelColumn),
      onClick: this.onClick
    }, this.renderLabels()), import_react.default.createElement("span", {
      id,
      ref: (ref) => this.refContent = ref,
      contentEditable: true,
      style: _objectSpread({
        display: "inline-block",
        boxSizing: "border-box",
        verticalAlign: "top",
        height: "100%",
        width: "",
        flex: 1,
        margin: 0,
        padding: "5px",
        overflowX: "hidden",
        overflowY: "auto",
        wordWrap: "break-word",
        whiteSpace: "pre-line",
        color: "#D4D4D4",
        outline: "none"
      }, style.contentBox),
      dangerouslySetInnerHTML: this.createMarkup(markupText),
      onKeyPress: this.onKeyPress,
      onKeyDown: this.onKeyDown,
      onClick: this.onClick,
      onBlur: this.onBlur,
      onScroll: this.onScroll,
      onPaste: this.onPaste,
      autoComplete: "off",
      autoCorrect: "off",
      autoCapitalize: "off",
      spellCheck: false
    }))));
  }
  renderErrorMessage() {
    const locale = this.props.locale || en_default, error = this.props.error || this.state.error, style = this.style;
    if (!error)
      return void 0;
    return import_react.default.createElement("p", {
      style: _objectSpread({
        color: "red",
        fontSize: "12px",
        position: "absolute",
        width: "calc(100% - 60px)",
        height: "60px",
        boxSizing: "border-box",
        margin: 0,
        padding: 0,
        paddingRight: "10px",
        overflowWrap: "break-word",
        display: "flex",
        flexDirection: "column",
        justifyContent: "center"
      }, style.errorMessage)
    }, format(locale.format, error));
  }
  renderLabels() {
    const colors = this.colors, style = this.style, error = this.props.error || this.state.error, errorLine = error ? error.line : -1, lines = this.state.lines ? this.state.lines : 1;
    let labels = new Array(lines);
    for (var i = 0; i < lines - 1; i++)
      labels[i] = i + 1;
    return labels.map((number) => {
      const color = number !== errorLine ? colors.default : "red";
      return import_react.default.createElement("div", {
        key: number,
        style: _objectSpread({}, style.labels, {
          color
        })
      }, number);
    });
  }
  createMarkup(markupText) {
    if (markupText === void 0)
      return {
        __html: ""
      };
    return {
      __html: "" + markupText
    };
  }
  newSpan(i, token, depth) {
    let colors = this.colors, type = token.type, string = token.string;
    let color = "";
    switch (type) {
      case "string":
      case "number":
      case "primitive":
      case "error":
        color = colors[token.type];
        break;
      case "key":
        if (string === " ")
          color = colors.keys_whiteSpace;
        else
          color = colors.keys;
        break;
      case "symbol":
        if (string === ":")
          color = colors.colon;
        else
          color = colors.default;
        break;
      default:
        color = colors.default;
        break;
    }
    if (string.length !== string.replace(/</g, "").replace(/>/g, "").length)
      string = "<xmp style=display:inline;>" + string + "</xmp>";
    return '<span type="' + type + '" value="' + string + '" depth="' + depth + '" style="color:' + color + '">' + string + "</span>";
  }
  getCursorPosition(countBR) {
    const isChildOf = (node2) => {
      while (node2 !== null) {
        if (node2 === this.refContent)
          return true;
        node2 = node2.parentNode;
      }
      return false;
    };
    let selection = window.getSelection(), charCount = -1, linebreakCount = 0, node;
    if (selection.focusNode && isChildOf(selection.focusNode)) {
      node = selection.focusNode;
      charCount = selection.focusOffset;
      while (node) {
        if (node === this.refContent)
          break;
        if (node.previousSibling) {
          node = node.previousSibling;
          if (countBR) {
            if (node.nodeName === "BR")
              linebreakCount++;
          }
          charCount += node.textContent.length;
        } else {
          node = node.parentNode;
          if (node === null)
            break;
        }
      }
    }
    return charCount + linebreakCount;
  }
  setCursorPosition(nextPosition) {
    if ([false, null, void 0].indexOf(nextPosition) > -1)
      return;
    const createRange = (node, chars, range) => {
      if (!range) {
        range = document.createRange();
        range.selectNode(node);
        range.setStart(node, 0);
      }
      if (chars.count === 0) {
        range.setEnd(node, chars.count);
      } else if (node && chars.count > 0) {
        if (node.nodeType === Node.TEXT_NODE) {
          if (node.textContent.length < chars.count)
            chars.count -= node.textContent.length;
          else {
            range.setEnd(node, chars.count);
            chars.count = 0;
          }
        } else
          for (var lp = 0; lp < node.childNodes.length; lp++) {
            range = createRange(node.childNodes[lp], chars, range);
            if (chars.count === 0)
              break;
          }
      }
      return range;
    };
    const setPosition = (chars) => {
      if (chars < 0)
        return;
      let selection = window.getSelection(), range = createRange(this.refContent, {
        count: chars
      });
      if (!range)
        return;
      range.collapse(false);
      selection.removeAllRanges();
      selection.addRange(range);
    };
    if (nextPosition > 0)
      setPosition(nextPosition);
    else
      this.refContent.focus();
  }
  update(cursorOffset = 0, updateCursorPosition = true) {
    const container = this.refContent, data = this.tokenize(container);
    if ("onChange" in this.props)
      this.props.onChange({
        plainText: data.indented,
        markupText: data.markup,
        json: data.json,
        jsObject: data.jsObject,
        lines: data.lines,
        error: data.error
      });
    let cursorPosition = this.getCursorPosition(data.error) + cursorOffset;
    this.setState({
      plainText: data.indented,
      markupText: data.markup,
      json: data.json,
      jsObject: data.jsObject,
      lines: data.lines,
      error: data.error
    });
    this.updateTime = false;
    if (updateCursorPosition)
      this.setCursorPosition(cursorPosition);
  }
  scheduledUpdate() {
    if ("onKeyPressUpdate" in this.props) {
      if (this.props.onKeyPressUpdate === false)
        return;
    }
    const {
      updateTime
    } = this;
    if (updateTime === false)
      return;
    if (updateTime > (/* @__PURE__ */ new Date()).getTime())
      return;
    this.update();
  }
  setUpdateTime() {
    if ("onKeyPressUpdate" in this.props) {
      if (this.props.onKeyPressUpdate === false)
        return;
    }
    this.updateTime = (/* @__PURE__ */ new Date()).getTime() + this.waitAfterKeyPress;
  }
  stopEvent(event) {
    if (!event)
      return;
    event.preventDefault();
    event.stopPropagation();
  }
  onKeyPress(event) {
    const ctrlOrMetaIsPressed = event.ctrlKey || event.metaKey;
    if (this.props.viewOnly && !ctrlOrMetaIsPressed)
      this.stopEvent(event);
    if (!ctrlOrMetaIsPressed)
      this.setUpdateTime();
  }
  onKeyDown(event) {
    const viewOnly = !!this.props.viewOnly;
    const ctrlOrMetaIsPressed = event.ctrlKey || event.metaKey;
    switch (event.key) {
      case "Tab":
        this.stopEvent(event);
        if (viewOnly)
          break;
        document.execCommand("insertText", false, "  ");
        this.setUpdateTime();
        break;
      case "Backspace":
      case "Delete":
        if (viewOnly)
          this.stopEvent(event);
        this.setUpdateTime();
        break;
      case "ArrowLeft":
      case "ArrowRight":
      case "ArrowUp":
      case "ArrowDown":
        this.setUpdateTime();
        break;
      case "a":
      case "c":
        if (viewOnly && !ctrlOrMetaIsPressed)
          this.stopEvent(event);
        break;
      default:
        if (viewOnly)
          this.stopEvent(event);
        break;
    }
  }
  onPaste(event) {
    if (this.props.viewOnly) {
      this.stopEvent(event);
    } else {
      event.preventDefault();
      var text = event.clipboardData.getData("text/plain");
      document.execCommand("insertText", false, text);
    }
    this.update();
  }
  onClick() {
    if ("viewOnly" in this.props) {
      if (this.props.viewOnly)
        return;
    }
  }
  onBlur() {
    if ("viewOnly" in this.props) {
      if (this.props.viewOnly)
        return;
    }
    const container = this.refContent, data = this.tokenize(container);
    if ("onBlur" in this.props)
      this.props.onBlur({
        plainText: data.indented,
        markupText: data.markup,
        json: data.json,
        jsObject: data.jsObject,
        lines: data.lines,
        error: data.error
      });
  }
  onScroll(event) {
    this.refLabels.scrollTop = event.target.scrollTop;
  }
  componentDidUpdate() {
    this.updateInternalProps();
    this.showPlaceholder();
  }
  componentDidMount() {
    this.showPlaceholder();
  }
  componentWillUnmount() {
    if (this.timer)
      clearInterval(this.timer);
  }
  showPlaceholder() {
    const placeholderDoesNotExist = !("placeholder" in this.props);
    if (placeholderDoesNotExist)
      return;
    const {
      placeholder
    } = this.props;
    const placeholderHasEmptyValues = [void 0, null].indexOf(placeholder) > -1;
    if (placeholderHasEmptyValues)
      return;
    const {
      prevPlaceholder,
      jsObject
    } = this.state;
    const {
      resetConfiguration
    } = this;
    const placeholderDataType = (0, import_mitsuketa2.getType)(placeholder);
    const unexpectedDataType = ["object", "array"].indexOf(placeholderDataType) === -1;
    if (unexpectedDataType)
      err_default.throwError("showPlaceholder", "placeholder", "either an object or an array");
    const samePlaceholderValues = (0, import_mitsuketa2.identical)(placeholder, prevPlaceholder);
    let componentShouldUpdate = !samePlaceholderValues;
    if (!componentShouldUpdate) {
      if (resetConfiguration) {
        if (jsObject !== void 0)
          componentShouldUpdate = !(0, import_mitsuketa2.identical)(placeholder, jsObject);
      }
    }
    if (!componentShouldUpdate)
      return;
    const data = this.tokenize(placeholder);
    this.setState({
      prevPlaceholder: placeholder,
      plainText: data.indentation,
      markupText: data.markup,
      lines: data.lines,
      error: data.error
    });
  }
  tokenize(something) {
    if (typeof something !== "object")
      return console.error("tokenize() expects object type properties only. Got '" + typeof something + "' type instead.");
    const locale = this.props.locale || en_default;
    const newSpan = this.newSpan;
    if ("nodeType" in something) {
      let quarkize = function(text, prefix = "") {
        let buffer3 = {
          active: false,
          string: "",
          number: "",
          symbol: "",
          space: "",
          delimiter: "",
          quarks: []
        };
        function pushAndStore(char, type) {
          switch (type) {
            case "symbol":
            case "delimiter":
              if (buffer3.active)
                buffer3.quarks.push({
                  string: buffer3[buffer3.active],
                  type: prefix + "-" + buffer3.active
                });
              buffer3[buffer3.active] = "";
              buffer3.active = type;
              buffer3[buffer3.active] = char;
              break;
            default:
              if (type !== buffer3.active || [buffer3.string, char].indexOf("\n") > -1) {
                if (buffer3.active)
                  buffer3.quarks.push({
                    string: buffer3[buffer3.active],
                    type: prefix + "-" + buffer3.active
                  });
                buffer3[buffer3.active] = "";
                buffer3.active = type;
                buffer3[buffer3.active] = char;
              } else
                buffer3[type] += char;
              break;
          }
        }
        function finalPush() {
          if (buffer3.active) {
            buffer3.quarks.push({
              string: buffer3[buffer3.active],
              type: prefix + "-" + buffer3.active
            });
            buffer3[buffer3.active] = "";
            buffer3.active = false;
          }
        }
        for (var i2 = 0; i2 < text.length; i2++) {
          const char = text.charAt(i2);
          switch (char) {
            case '"':
            case "'":
              pushAndStore(char, "delimiter");
              break;
            case " ":
            case " ":
              pushAndStore(char, "space");
              break;
            case "{":
            case "}":
            case "[":
            case "]":
            case ":":
            case ",":
              pushAndStore(char, "symbol");
              break;
            case "0":
            case "1":
            case "2":
            case "3":
            case "4":
            case "5":
            case "6":
            case "7":
            case "8":
            case "9":
              if (buffer3.active === "string")
                pushAndStore(char, "string");
              else
                pushAndStore(char, "number");
              break;
            case "-":
              if (i2 < text.length - 1) {
                if ("0123456789".indexOf(text.charAt(i2 + 1)) > -1) {
                  pushAndStore(char, "number");
                  break;
                }
              }
            case ".":
              if (i2 < text.length - 1 && i2 > 0) {
                if ("0123456789".indexOf(text.charAt(i2 + 1)) > -1 && "0123456789".indexOf(text.charAt(i2 - 1)) > -1) {
                  pushAndStore(char, "number");
                  break;
                }
              }
            default:
              pushAndStore(char, "string");
              break;
          }
        }
        finalPush();
        return buffer3.quarks;
      }, validToken = function(string, type) {
        const quotes2 = `'"`;
        let firstChar = "", lastChar = "", quoteType = false;
        switch (type) {
          case "primitive":
            if (["true", "false", "null", "undefined"].indexOf(string) === -1)
              return false;
            break;
          case "string":
            if (string.length < 2)
              return false;
            firstChar = string.charAt(0), lastChar = string.charAt(string.length - 1), quoteType = quotes2.indexOf(firstChar);
            if (quoteType === -1)
              return false;
            if (firstChar !== lastChar)
              return false;
            for (var i2 = 0; i2 < string.length; i2++) {
              if (i2 > 0 && i2 < string.length - 1) {
                if (string.charAt(i2) === quotes2[quoteType]) {
                  if (string.charAt(i2 - 1) !== "\\")
                    return false;
                }
              }
            }
            break;
          case "key":
            if (string.length === 0)
              return false;
            firstChar = string.charAt(0), lastChar = string.charAt(string.length - 1), quoteType = quotes2.indexOf(firstChar);
            if (quoteType > -1) {
              if (string.length === 1)
                return false;
              if (firstChar !== lastChar)
                return false;
              for (var i2 = 0; i2 < string.length; i2++) {
                if (i2 > 0 && i2 < string.length - 1) {
                  if (string.charAt(i2) === quotes2[quoteType]) {
                    if (string.charAt(i2 - 1) !== "\\")
                      return false;
                  }
                }
              }
            } else {
              const nonAlphanumeric = "'\"`.,:;{}[]&<>=~*%\\|/-+!?@^  ";
              for (var i2 = 0; i2 < nonAlphanumeric.length; i2++) {
                const nonAlpha = nonAlphanumeric.charAt(i2);
                if (string.indexOf(nonAlpha) > -1)
                  return false;
              }
            }
            break;
          case "number":
            for (var i2 = 0; i2 < string.length; i2++) {
              if ("0123456789".indexOf(string.charAt(i2)) === -1) {
                if (i2 === 0) {
                  if ("-" !== string.charAt(0))
                    return false;
                } else if ("." !== string.charAt(i2))
                  return false;
              }
            }
            break;
          case "symbol":
            if (string.length > 1)
              return false;
            if ("{[:]},".indexOf(string) === -1)
              return false;
            break;
          case "colon":
            if (string.length > 1)
              return false;
            if (":" !== string)
              return false;
            break;
          default:
            return true;
            break;
        }
        return true;
      }, tokenFollowed = function() {
        const last = buffer.tokens_normalize.length - 1;
        if (last < 1)
          return false;
        for (var i2 = last; i2 >= 0; i2--) {
          const previousToken = buffer.tokens_normalize[i2];
          switch (previousToken.type) {
            case "space":
            case "linebreak":
              break;
            default:
              return previousToken;
              break;
          }
        }
        return false;
      }, setError = function(tokenID, reason, offset = 0) {
        error = {
          token: tokenID,
          line,
          reason
        };
        buffer.tokens_merge[tokenID + offset].type = "error";
      }, followedBySymbol = function(tokenID, options) {
        if (tokenID === void 0)
          console.error("tokenID argument must be an integer.");
        if (options === void 0)
          console.error("options argument must be an array.");
        if (tokenID === buffer.tokens_merge.length - 1)
          return false;
        for (var i2 = tokenID + 1; i2 < buffer.tokens_merge.length; i2++) {
          const nextToken = buffer.tokens_merge[i2];
          switch (nextToken.type) {
            case "space":
            case "linebreak":
              break;
            case "symbol":
            case "colon":
              if (options.indexOf(nextToken.string) > -1)
                return i2;
              else
                return false;
              break;
            default:
              return false;
              break;
          }
        }
        return false;
      }, followsSymbol = function(tokenID, options) {
        if (tokenID === void 0)
          console.error("tokenID argument must be an integer.");
        if (options === void 0)
          console.error("options argument must be an array.");
        if (tokenID === 0)
          return false;
        for (var i2 = tokenID - 1; i2 >= 0; i2--) {
          const previousToken = buffer.tokens_merge[i2];
          switch (previousToken.type) {
            case "space":
            case "linebreak":
              break;
            case "symbol":
            case "colon":
              if (options.indexOf(previousToken.string) > -1)
                return true;
              return false;
              break;
            default:
              return false;
              break;
          }
        }
        return false;
      }, typeFollowed = function(tokenID) {
        if (tokenID === void 0)
          console.error("tokenID argument must be an integer.");
        if (tokenID === 0)
          return false;
        for (var i2 = tokenID - 1; i2 >= 0; i2--) {
          const previousToken = buffer.tokens_merge[i2];
          switch (previousToken.type) {
            case "space":
            case "linebreak":
              break;
            default:
              return previousToken.type;
              break;
          }
        }
        return false;
      }, newIndent = function() {
        var space = [];
        for (var i2 = 0; i2 < _depth * 2; i2++)
          space.push("&nbsp;");
        return space.join("");
      }, newLineBreak = function(byPass = false) {
        _line++;
        if (_depth > 0 || byPass) {
          return "<br>";
        }
        return "";
      }, newLineBreakAndIndent = function(byPass = false) {
        return newLineBreak(byPass) + newIndent();
      };
      const containerNode = something.cloneNode(true), hasChildren = containerNode.hasChildNodes();
      if (!hasChildren)
        return "";
      const children = containerNode.childNodes;
      let buffer = {
        tokens_unknown: [],
        tokens_proto: [],
        tokens_split: [],
        tokens_fallback: [],
        tokens_normalize: [],
        tokens_merge: [],
        tokens_plainText: "",
        indented: "",
        json: "",
        jsObject: void 0,
        markup: ""
      };
      for (var i = 0; i < children.length; i++) {
        let child = children[i];
        let info = {};
        switch (child.nodeName) {
          case "SPAN":
            info = {
              string: child.textContent,
              type: child.attributes.type.textContent
            };
            buffer.tokens_unknown.push(info);
            break;
          case "DIV":
            buffer.tokens_unknown.push({
              string: child.textContent,
              type: "unknown"
            });
            break;
          case "BR":
            if (child.textContent === "")
              buffer.tokens_unknown.push({
                string: "\n",
                type: "unknown"
              });
            break;
          case "#text":
            buffer.tokens_unknown.push({
              string: child.wholeText,
              type: "unknown"
            });
            break;
          case "FONT":
            buffer.tokens_unknown.push({
              string: child.textContent,
              type: "unknown"
            });
            break;
          default:
            console.error("Unrecognized node:", {
              child
            });
            break;
        }
      }
      for (var i = 0; i < buffer.tokens_unknown.length; i++) {
        let token = buffer.tokens_unknown[i];
        buffer.tokens_proto = buffer.tokens_proto.concat(quarkize(token.string, "proto"));
      }
      for (var i = 0; i < buffer.tokens_proto.length; i++) {
        let token = buffer.tokens_proto[i];
        if (token.type.indexOf("proto") === -1) {
          if (!validToken(token.string, token.type)) {
            buffer.tokens_split = buffer.tokens_split.concat(quarkize(token.string, "split"));
          } else
            buffer.tokens_split.push(token);
        } else
          buffer.tokens_split.push(token);
      }
      for (var i = 0; i < buffer.tokens_split.length; i++) {
        let token = buffer.tokens_split[i];
        let type = token.type, string = token.string, length = string.length, fallback = [];
        if (type.indexOf("-") > -1) {
          type = type.slice(type.indexOf("-") + 1);
          if (type !== "string")
            fallback.push("string");
          fallback.push("key");
          fallback.push("error");
        }
        let tokul = {
          string,
          length,
          type,
          fallback
        };
        buffer.tokens_fallback.push(tokul);
      }
      let buffer2 = {
        brackets: [],
        stringOpen: false,
        isValue: false
      };
      for (var i = 0; i < buffer.tokens_fallback.length; i++) {
        let token = buffer.tokens_fallback[i];
        const type = token.type, string = token.string;
        let normalToken = {
          type,
          string
        };
        switch (type) {
          case "symbol":
          case "colon":
            if (buffer2.stringOpen) {
              if (buffer2.isValue)
                normalToken.type = "string";
              else
                normalToken.type = "key";
              break;
            }
            switch (string) {
              case "[":
              case "{":
                buffer2.brackets.push(string);
                buffer2.isValue = buffer2.brackets[buffer2.brackets.length - 1] === "[";
                break;
              case "]":
              case "}":
                buffer2.brackets.pop();
                buffer2.isValue = buffer2.brackets[buffer2.brackets.length - 1] === "[";
                break;
              case ",":
                if (tokenFollowed().type === "colon")
                  break;
                buffer2.isValue = buffer2.brackets[buffer2.brackets.length - 1] === "[";
                break;
              case ":":
                normalToken.type = "colon";
                buffer2.isValue = true;
                break;
            }
            break;
          case "delimiter":
            if (buffer2.isValue)
              normalToken.type = "string";
            else
              normalToken.type = "key";
            if (!buffer2.stringOpen) {
              buffer2.stringOpen = string;
              break;
            }
            if (i > 0) {
              const previousToken = buffer.tokens_fallback[i - 1], _string = previousToken.string, _type = previousToken.type, _char = _string.charAt(_string.length - 1);
              if (_type === "string" && _char === "\\")
                break;
            }
            if (buffer2.stringOpen === string) {
              buffer2.stringOpen = false;
              break;
            }
            break;
          case "primitive":
          case "string":
            if (["false", "true", "null", "undefined"].indexOf(string) > -1) {
              const lastIndex = buffer.tokens_normalize.length - 1;
              if (lastIndex >= 0) {
                if (buffer.tokens_normalize[lastIndex].type !== "string") {
                  normalToken.type = "primitive";
                  break;
                }
                normalToken.type = "string";
                break;
              }
              normalToken.type = "primitive";
              break;
            }
            if (string === "\n") {
              if (!buffer2.stringOpen) {
                normalToken.type = "linebreak";
                break;
              }
            }
            if (buffer2.isValue)
              normalToken.type = "string";
            else
              normalToken.type = "key";
            break;
          case "space":
            if (buffer2.stringOpen)
              if (buffer2.isValue)
                normalToken.type = "string";
              else
                normalToken.type = "key";
            break;
          case "number":
            if (buffer2.stringOpen)
              if (buffer2.isValue)
                normalToken.type = "string";
              else
                normalToken.type = "key";
            break;
          default:
            break;
        }
        buffer.tokens_normalize.push(normalToken);
      }
      for (var i = 0; i < buffer.tokens_normalize.length; i++) {
        const token = buffer.tokens_normalize[i];
        let mergedToken = {
          string: token.string,
          type: token.type,
          tokens: [i]
        };
        if (["symbol", "colon"].indexOf(token.type) === -1) {
          if (i + 1 < buffer.tokens_normalize.length) {
            let count = 0;
            for (var u = i + 1; u < buffer.tokens_normalize.length; u++) {
              const nextToken = buffer.tokens_normalize[u];
              if (token.type !== nextToken.type)
                break;
              mergedToken.string += nextToken.string;
              mergedToken.tokens.push(u);
              count++;
            }
            i += count;
          }
        }
        buffer.tokens_merge.push(mergedToken);
      }
      const quotes = `'"`, alphanumeric = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_$";
      var error = false, line = buffer.tokens_merge.length > 0 ? 1 : 0;
      buffer2 = {
        brackets: [],
        stringOpen: false,
        isValue: false
      };
      let bracketList = [];
      for (var i = 0; i < buffer.tokens_merge.length; i++) {
        if (error)
          break;
        let token = buffer.tokens_merge[i], string = token.string, type = token.type, found = false;
        switch (type) {
          case "space":
            break;
          case "linebreak":
            line++;
            break;
          case "symbol":
            switch (string) {
              case "{":
              case "[":
                found = followsSymbol(i, ["}", "]"]);
                if (found) {
                  setError(i, format(locale.invalidToken.tokenSequence.prohibited, {
                    firstToken: buffer.tokens_merge[found].string,
                    secondToken: string
                  }));
                  break;
                }
                if (string === "[" && i > 0) {
                  if (!followsSymbol(i, [":", "[", ","])) {
                    setError(i, format(locale.invalidToken.tokenSequence.permitted, {
                      firstToken: "[",
                      secondToken: [":", "[", ","]
                    }));
                    break;
                  }
                }
                if (string === "{") {
                  if (followsSymbol(i, ["{"])) {
                    setError(i, format(locale.invalidToken.double, {
                      token: "{"
                    }));
                    break;
                  }
                }
                buffer2.brackets.push(string);
                buffer2.isValue = buffer2.brackets[buffer2.brackets.length - 1] === "[";
                bracketList.push({
                  i,
                  line,
                  string
                });
                break;
              case "}":
              case "]":
                if (string === "}") {
                  if (buffer2.brackets[buffer2.brackets.length - 1] !== "{") {
                    setError(i, format(locale.brace.curly.missingOpen));
                    break;
                  }
                }
                if (string === "}") {
                  if (followsSymbol(i, [","])) {
                    setError(i, format(locale.invalidToken.tokenSequence.prohibited, {
                      firstToken: ",",
                      secondToken: "}"
                    }));
                    break;
                  }
                }
                if (string === "]") {
                  if (buffer2.brackets[buffer2.brackets.length - 1] !== "[") {
                    setError(i, format(locale.brace.square.missingOpen));
                    break;
                  }
                }
                if (string === "]") {
                  if (followsSymbol(i, [":"])) {
                    setError(i, format(locale.invalidToken.tokenSequence.prohibited, {
                      firstToken: ":",
                      secondToken: "]"
                    }));
                    break;
                  }
                }
                buffer2.brackets.pop();
                buffer2.isValue = buffer2.brackets[buffer2.brackets.length - 1] === "[";
                bracketList.push({
                  i,
                  line,
                  string
                });
                break;
              case ",":
                found = followsSymbol(i, ["{"]);
                if (found) {
                  if (followedBySymbol(i, ["}"])) {
                    setError(i, format(locale.brace.curly.cannotWrap, {
                      token: ","
                    }));
                    break;
                  }
                  setError(i, format(locale.invalidToken.tokenSequence.prohibited, {
                    firstToken: "{",
                    secondToken: ","
                  }));
                  break;
                }
                if (followedBySymbol(i, ["}", ",", "]"])) {
                  setError(i, format(locale.noTrailingOrLeadingComma));
                  break;
                }
                found = typeFollowed(i);
                switch (found) {
                  case "key":
                  case "colon":
                    setError(i, format(locale.invalidToken.termSequence.prohibited, {
                      firstTerm: found === "key" ? locale.types.key : locale.symbols.colon,
                      secondTerm: locale.symbols.comma
                    }));
                    break;
                  case "symbol":
                    if (followsSymbol(i, ["{"])) {
                      setError(i, format(locale.invalidToken.tokenSequence.prohibited, {
                        firstToken: "{",
                        secondToken: ","
                      }));
                      break;
                    }
                    break;
                  default:
                    break;
                }
                buffer2.isValue = buffer2.brackets[buffer2.brackets.length - 1] === "[";
                break;
              default:
                break;
            }
            buffer.json += string;
            break;
          case "colon":
            found = followsSymbol(i, ["["]);
            if (found && followedBySymbol(i, ["]"])) {
              setError(i, format(locale.brace.square.cannotWrap, {
                token: ":"
              }));
              break;
            }
            if (found) {
              setError(i, format(locale.invalidToken.tokenSequence.prohibited, {
                firstToken: "[",
                secondToken: ":"
              }));
              break;
            }
            if (typeFollowed(i) !== "key") {
              setError(i, format(locale.invalidToken.termSequence.permitted, {
                firstTerm: locale.symbols.colon,
                secondTerm: locale.types.key
              }));
              break;
            }
            if (followedBySymbol(i, ["}", "]"])) {
              setError(i, format(locale.invalidToken.termSequence.permitted, {
                firstTerm: locale.symbols.colon,
                secondTerm: locale.types.value
              }));
              break;
            }
            buffer2.isValue = true;
            buffer.json += string;
            break;
          case "key":
          case "string":
            let firstChar = string.charAt(0), lastChar = string.charAt(string.length - 1), quote_primary = quotes.indexOf(firstChar);
            if (quotes.indexOf(firstChar) === -1) {
              if (quotes.indexOf(lastChar) !== -1) {
                setError(i, format(locale.string.missingOpen, {
                  quote: firstChar
                }));
                break;
              }
            }
            if (quotes.indexOf(lastChar) === -1) {
              if (quotes.indexOf(firstChar) !== -1) {
                setError(i, format(locale.string.missingClose, {
                  quote: firstChar
                }));
                break;
              }
            }
            if (quotes.indexOf(firstChar) > -1) {
              if (firstChar !== lastChar) {
                setError(i, format(locale.string.missingClose, {
                  quote: firstChar
                }));
                break;
              }
            }
            if ("string" === type) {
              if (quotes.indexOf(firstChar) === -1 && quotes.indexOf(lastChar) === -1) {
                setError(i, format(locale.string.mustBeWrappedByQuotes));
                break;
              }
            }
            if ("key" === type) {
              if (followedBySymbol(i, ["}", "]"])) {
                setError(i, format(locale.invalidToken.termSequence.permitted, {
                  firstTerm: locale.types.key,
                  secondTerm: locale.symbols.colon
                }));
              }
            }
            if (quotes.indexOf(firstChar) === -1 && quotes.indexOf(lastChar) === -1)
              for (var h = 0; h < string.length; h++) {
                if (error)
                  break;
                const c = string.charAt(h);
                if (alphanumeric.indexOf(c) === -1) {
                  setError(i, format(locale.string.nonAlphanumeric, {
                    token: c
                  }));
                  break;
                }
              }
            if (firstChar === "'")
              string = '"' + string.slice(1, -1) + '"';
            else if (firstChar !== '"')
              string = '"' + string + '"';
            if ("key" === type) {
              if ("key" === typeFollowed(i)) {
                if (i > 0) {
                  if (!isNaN(buffer.tokens_merge[i - 1])) {
                    buffer.tokens_merge[i - 1] += buffer.tokens_merge[i];
                    setError(i, format(locale.key.numberAndLetterMissingQuotes));
                    break;
                  }
                }
                setError(i, format(locale.key.spaceMissingQuotes));
                break;
              }
            }
            if ("key" === type) {
              if (!followsSymbol(i, ["{", ","])) {
                setError(i, format(locale.invalidToken.tokenSequence.permitted, {
                  firstToken: type,
                  secondToken: ["{", ","]
                }));
                break;
              }
            }
            if ("string" === type) {
              if (!followsSymbol(i, ["[", ":", ","])) {
                setError(i, format(locale.invalidToken.tokenSequence.permitted, {
                  firstToken: type,
                  secondToken: ["[", ":", ","]
                }));
                break;
              }
            }
            if ("key" === type) {
              if (buffer2.isValue) {
                setError(i, format(locale.string.unexpectedKey));
                break;
              }
            }
            if ("string" === type) {
              if (!buffer2.isValue) {
                setError(i, format(locale.key.unexpectedString));
                break;
              }
            }
            buffer.json += string;
            break;
          case "number":
          case "primitive":
            if (followsSymbol(i, ["{"])) {
              buffer.tokens_merge[i].type = "key";
              type = buffer.tokens_merge[i].type;
              string = '"' + string + '"';
            } else if (typeFollowed(i) === "key") {
              buffer.tokens_merge[i].type = "key";
              type = buffer.tokens_merge[i].type;
            } else if (!followsSymbol(i, ["[", ":", ","])) {
              setError(i, format(locale.invalidToken.tokenSequence.permitted, {
                firstToken: type,
                secondToken: ["[", ":", ","]
              }));
              break;
            }
            if (type !== "key") {
              if (!buffer2.isValue) {
                buffer.tokens_merge[i].type = "key";
                type = buffer.tokens_merge[i].type;
                string = '"' + string + '"';
              }
            }
            if (type === "primitive") {
              if (string === "undefined")
                setError(i, format(locale.invalidToken.useInstead, {
                  badToken: "undefined",
                  goodToken: "null"
                }));
            }
            buffer.json += string;
            break;
        }
      }
      let noEscapedSingleQuote = "";
      for (var i = 0; i < buffer.json.length; i++) {
        let current = buffer.json.charAt(i), next = "";
        if (i + 1 < buffer.json.length) {
          next = buffer.json.charAt(i + 1);
          if (current === "\\" && next === "'") {
            noEscapedSingleQuote += next;
            i++;
            continue;
          }
        }
        noEscapedSingleQuote += current;
      }
      buffer.json = noEscapedSingleQuote;
      if (!error) {
        let removePair = function(index) {
          bracketList.splice(index + 1, 1);
          bracketList.splice(index, 1);
          if (!delta)
            delta = true;
        };
        const maxIterations = Math.ceil(bracketList.length / 2);
        let round = 0, delta = false;
        while (bracketList.length > 0) {
          delta = false;
          for (var tokenCount = 0; tokenCount < bracketList.length - 1; tokenCount++) {
            const pair = bracketList[tokenCount].string + bracketList[tokenCount + 1].string;
            if (["[]", "{}"].indexOf(pair) > -1)
              removePair(tokenCount);
          }
          round++;
          if (!delta)
            break;
          if (round >= maxIterations)
            break;
        }
        if (bracketList.length > 0) {
          const _tokenString = bracketList[0].string, _tokenPosition = bracketList[0].i, _closingBracketType = _tokenString === "[" ? "]" : "}";
          line = bracketList[0].line;
          setError(_tokenPosition, format(locale.brace[_closingBracketType === "]" ? "square" : "curly"].missingClose));
        }
      }
      if (!error) {
        if ([void 0, ""].indexOf(buffer.json) === -1)
          try {
            buffer.jsObject = JSON.parse(buffer.json);
          } catch (err2) {
            const errorMessage = err2.message, subsMark = errorMessage.indexOf("position");
            if (subsMark === -1)
              throw new Error("Error parsing failed");
            const errPositionStr = errorMessage.substring(subsMark + 9, errorMessage.length), errPosition = parseInt(errPositionStr);
            let charTotal = 0, tokenIndex = 0, token = false, _line2 = 1, exitWhile = false;
            while (charTotal < errPosition && !exitWhile) {
              token = buffer.tokens_merge[tokenIndex];
              if ("linebreak" === token.type)
                _line2++;
              if (["space", "linebreak"].indexOf(token.type) === -1)
                charTotal += token.string.length;
              if (charTotal >= errPosition)
                break;
              tokenIndex++;
              if (!buffer.tokens_merge[tokenIndex + 1])
                exitWhile = true;
            }
            line = _line2;
            let backslashCount = 0;
            for (let i2 = 0; i2 < token.string.length; i2++) {
              const char = token.string.charAt(i2);
              if (char === "\\")
                backslashCount = backslashCount > 0 ? backslashCount + 1 : 1;
              else {
                if (backslashCount % 2 !== 0 || backslashCount === 0) {
                  if (`'"bfnrt`.indexOf(char) === -1) {
                    setError(tokenIndex, format(locale.invalidToken.unexpected, {
                      token: "\\"
                    }));
                  }
                }
                backslashCount = 0;
              }
            }
            if (!error)
              setError(tokenIndex, format(locale.invalidToken.unexpected, {
                token: token.string
              }));
          }
      }
      let _line = 1, _depth = 0;
      ;
      if (!error)
        for (var i = 0; i < buffer.tokens_merge.length; i++) {
          const token = buffer.tokens_merge[i], string = token.string, type = token.type;
          switch (type) {
            case "space":
            case "linebreak":
              break;
            case "string":
            case "number":
            case "primitive":
            case "error":
              buffer.markup += (followsSymbol(i, [",", "["]) ? newLineBreakAndIndent() : "") + newSpan(i, token, _depth);
              break;
            case "key":
              buffer.markup += newLineBreakAndIndent() + newSpan(i, token, _depth);
              break;
            case "colon":
              buffer.markup += newSpan(i, token, _depth) + "&nbsp;";
              break;
            case "symbol":
              switch (string) {
                case "[":
                case "{":
                  buffer.markup += (!followsSymbol(i, [":"]) ? newLineBreakAndIndent() : "") + newSpan(i, token, _depth);
                  _depth++;
                  break;
                case "]":
                case "}":
                  _depth--;
                  const islastToken = i === buffer.tokens_merge.length - 1, _adjustment = i > 0 ? ["[", "{"].indexOf(buffer.tokens_merge[i - 1].string) > -1 ? "" : newLineBreakAndIndent(islastToken) : "";
                  buffer.markup += _adjustment + newSpan(i, token, _depth);
                  break;
                case ",":
                  buffer.markup += newSpan(i, token, _depth);
                  break;
              }
              break;
          }
        }
      if (error) {
        let countCarrigeReturn = function(string) {
          let count = 0;
          for (var i2 = 0; i2 < string.length; i2++) {
            if (["\n", "\r"].indexOf(string[i2]) > -1)
              count++;
          }
          return count;
        };
        let _line_fallback = 1;
        _line = 1;
        for (var i = 0; i < buffer.tokens_merge.length; i++) {
          const token = buffer.tokens_merge[i], type = token.type, string = token.string;
          if (type === "linebreak")
            _line++;
          buffer.markup += newSpan(i, token, _depth);
          _line_fallback += countCarrigeReturn(string);
        }
        _line++;
        _line_fallback++;
        if (_line < _line_fallback)
          _line = _line_fallback;
      }
      for (var i = 0; i < buffer.tokens_merge.length; i++) {
        let token = buffer.tokens_merge[i];
        buffer.indented += token.string;
        if (["space", "linebreak"].indexOf(token.type) === -1)
          buffer.tokens_plainText += token.string;
      }
      if (error) {
        let isFunction = function(functionToCheck) {
          return functionToCheck && {}.toString.call(functionToCheck) === "[object Function]";
        };
        if ("modifyErrorText" in this.props) {
          if (isFunction(this.props.modifyErrorText))
            error.reason = this.props.modifyErrorText(error.reason);
        }
      }
      return {
        tokens: buffer.tokens_merge,
        noSpaces: buffer.tokens_plainText,
        indented: buffer.indented,
        json: buffer.json,
        jsObject: buffer.jsObject,
        markup: buffer.markup,
        lines: _line,
        error
      };
    }
    ;
    if (!("nodeType" in something)) {
      let escape_character = function() {
        if (buffer.currentChar !== "\\")
          return false;
        return true;
      }, extract = function(string, position) {
        return string.slice(0, position) + string.slice(position + 1);
      }, determine_string = function() {
        if (`'"`.indexOf(buffer.currentChar) === -1)
          return false;
        if (!buffer.stringOpen) {
          add_tokenSecondary();
          buffer.stringStart = buffer.position;
          buffer.stringOpen = buffer.currentChar;
          return true;
        }
        if (buffer.stringOpen === buffer.currentChar) {
          add_tokenSecondary();
          const stringToken = buffer.inputText.substring(buffer.stringStart, buffer.position + 1);
          add_tokenPrimary(stringToken);
          buffer.stringOpen = false;
          return true;
        }
        return false;
      }, determine_value = function() {
        if (":,{}[]".indexOf(buffer.currentChar) === -1)
          return false;
        if (buffer.stringOpen)
          return false;
        add_tokenSecondary();
        add_tokenPrimary(buffer.currentChar);
        switch (buffer.currentChar) {
          case ":":
            buffer.isValue = true;
            return true;
            break;
          case "{":
          case "[":
            buffer.brackets.push(buffer.currentChar);
            break;
          case "}":
          case "]":
            buffer.brackets.pop();
            break;
        }
        if (buffer.currentChar !== ":")
          buffer.isValue = buffer.brackets[buffer.brackets.length - 1] === "[";
        return true;
      }, add_tokenSecondary = function() {
        if (buffer.tokenSecondary.length === 0)
          return false;
        buffer.tokens.push(buffer.tokenSecondary);
        buffer.tokenSecondary = "";
        return true;
      }, add_tokenPrimary = function(value) {
        if (value.length === 0)
          return false;
        buffer.tokens.push(value);
        return true;
      }, indent = function(number) {
        var space = [];
        for (var i2 = 0; i2 < number * 2; i2++)
          space.push(" ");
        return (number > 0 ? "\n" : "") + space.join("");
      }, indentII = function(number) {
        var space = [];
        if (number > 0)
          lines++;
        for (var i2 = 0; i2 < number * 2; i2++)
          space.push("&nbsp;");
        return (number > 0 ? "<br>" : "") + space.join("");
      };
      let buffer = {
        inputText: JSON.stringify(something),
        position: 0,
        currentChar: "",
        tokenPrimary: "",
        tokenSecondary: "",
        brackets: [],
        isValue: false,
        stringOpen: false,
        stringStart: 0,
        tokens: []
      };
      for (var i = 0; i < buffer.inputText.length; i++) {
        buffer.position = i;
        buffer.currentChar = buffer.inputText.charAt(buffer.position);
        const a = determine_value(), b = determine_string(), c = escape_character();
        if (!a && !b && !c) {
          if (!buffer.stringOpen)
            buffer.tokenSecondary += buffer.currentChar;
        }
      }
      let buffer2 = {
        brackets: [],
        isValue: false,
        tokens: []
      };
      buffer2.tokens = buffer.tokens.map((token) => {
        let type = "", string = "", value = "";
        switch (token) {
          case ",":
            type = "symbol";
            string = token;
            value = token;
            buffer2.isValue = buffer2.brackets[buffer2.brackets.length - 1] === "[";
            break;
          case ":":
            type = "symbol";
            string = token;
            value = token;
            buffer2.isValue = true;
            break;
          case "{":
          case "[":
            type = "symbol";
            string = token;
            value = token;
            buffer2.brackets.push(token);
            buffer2.isValue = buffer2.brackets[buffer2.brackets.length - 1] === "[";
            break;
          case "}":
          case "]":
            type = "symbol";
            string = token;
            value = token;
            buffer2.brackets.pop();
            buffer2.isValue = buffer2.brackets[buffer2.brackets.length - 1] === "[";
            break;
          case "undefined":
            type = "primitive";
            string = token;
            value = void 0;
            break;
          case "null":
            type = "primitive";
            string = token;
            value = null;
            break;
          case "false":
            type = "primitive";
            string = token;
            value = false;
            break;
          case "true":
            type = "primitive";
            string = token;
            value = true;
            break;
          default:
            let stripQuotesFromKey = function(text) {
              if (text.length === 0)
                return text;
              if (['""', "''"].indexOf(text) > -1)
                return "''";
              let wrappedInQuotes = false;
              for (var i2 = 0; i2 < 2; i2++) {
                if ([text.charAt(0), text.charAt(text.length - 1)].indexOf(['"', "'"][i2]) > -1) {
                  wrappedInQuotes = true;
                  break;
                }
              }
              if (wrappedInQuotes && text.length >= 2)
                text = text.slice(1, -1);
              const nonAlphaNumeric = text.replace(/\w/g, ""), alphaNumeric = text.replace(/\W+/g, ""), mayRemoveQuotes = ((nonAlphaNumeric2, text2) => {
                let numberAndLetter = false;
                for (var i3 = 0; i3 < text2.length; i3++) {
                  if (i3 === 0) {
                    if (isNaN(text2.charAt(i3)))
                      break;
                  }
                  if (isNaN(text2.charAt(i3))) {
                    numberAndLetter = true;
                    break;
                  }
                }
                return !(nonAlphaNumeric2.length > 0 || numberAndLetter);
              })(nonAlphaNumeric, text), hasQuotes = ((string2) => {
                for (var i3 = 0; i3 < string2.length; i3++) {
                  if (["'", '"'].indexOf(string2.charAt(i3)) > -1)
                    return true;
                }
                return false;
              })(nonAlphaNumeric);
              if (hasQuotes) {
                let newText = "";
                const charList = text.split("");
                for (var ii2 = 0; ii2 < charList.length; ii2++) {
                  let char = charList[ii2];
                  if (["'", '"'].indexOf(char) > -1)
                    char = "\\" + char;
                  newText += char;
                }
                text = newText;
              }
              if (!mayRemoveQuotes)
                return "'" + text + "'";
              else
                return text;
            };
            const C = token.charAt(0);
            if (`'"`.indexOf(C) > -1) {
              if (buffer2.isValue)
                type = "string";
              else
                type = "key";
              if (type === "key")
                string = stripQuotesFromKey(token);
              if (type === "string") {
                string = "";
                const charList2 = token.slice(1, -1).split("");
                for (var ii = 0; ii < charList2.length; ii++) {
                  let char = charList2[ii];
                  if (`'"`.indexOf(char) > -1)
                    char = "\\" + char;
                  string += char;
                }
                string = "'" + string + "'";
              }
              value = string;
              break;
            }
            if (!isNaN(token)) {
              type = "number";
              string = token;
              value = Number(token);
              break;
            }
            if (token.length > 0) {
              if (!buffer2.isValue) {
                type = "key";
                string = token;
                if (string.indexOf(" ") > -1)
                  string = "'" + string + "'";
                value = string;
                break;
              }
            }
        }
        return {
          type,
          string,
          value,
          depth: buffer2.brackets.length
        };
      });
      let clean = "";
      for (var i = 0; i < buffer2.tokens.length; i++) {
        let token = buffer2.tokens[i];
        clean += token.string;
      }
      ;
      let indentation = "";
      for (var i = 0; i < buffer2.tokens.length; i++) {
        let token = buffer2.tokens[i];
        switch (token.string) {
          case "[":
          case "{":
            const nextToken = i < buffer2.tokens.length - 1 - 1 ? buffer2.tokens[i + 1] : "";
            if ("}]".indexOf(nextToken.string) === -1)
              indentation += token.string + indent(token.depth);
            else
              indentation += token.string;
            break;
          case "]":
          case "}":
            const prevToken = i > 0 ? buffer2.tokens[i - 1] : "";
            if ("[{".indexOf(prevToken.string) === -1)
              indentation += indent(token.depth) + token.string;
            else
              indentation += token.string;
            break;
          case ":":
            indentation += token.string + " ";
            break;
          case ",":
            indentation += token.string + indent(token.depth);
            break;
          default:
            indentation += token.string;
            break;
        }
      }
      let lines = 1;
      ;
      let markup = "";
      const lastIndex = buffer2.tokens.length - 1;
      for (var i = 0; i < buffer2.tokens.length; i++) {
        let token = buffer2.tokens[i];
        let span = newSpan(i, token, token.depth);
        switch (token.string) {
          case "{":
          case "[":
            const nextToken = i < buffer2.tokens.length - 1 - 1 ? buffer2.tokens[i + 1] : "";
            if ("}]".indexOf(nextToken.string) === -1)
              markup += span + indentII(token.depth);
            else
              markup += span;
            break;
          case "}":
          case "]":
            const prevToken = i > 0 ? buffer2.tokens[i - 1] : "";
            if ("[{".indexOf(prevToken.string) === -1)
              markup += indentII(token.depth) + (lastIndex === i ? "<br>" : "") + span;
            else
              markup += span;
            break;
          case ":":
            markup += span + " ";
            break;
          case ",":
            markup += span + indentII(token.depth);
            break;
          default:
            markup += span;
            break;
        }
      }
      lines += 2;
      return {
        tokens: buffer2.tokens,
        noSpaces: clean,
        indented: indentation,
        json: JSON.stringify(something),
        jsObject: something,
        markup,
        lines
      };
    }
  }
};
var es_default = JSONInput;
export {
  es_default as default
};
/*! Bundled license information:

react-json-editor-ajrm/es/index.js:
  (** @license react-json-editor-ajrm v2.5.14
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
//# sourceMappingURL=react-json-editor-ajrm.js.map
